{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","onHandleGoodBtn","onHandleNeutralBtn","onHandleBadBtn","className","type","onClick","Statistics","Good","Neutral","Bad","Total","Positive","Section","title","children","defaultProps","Notification","message","App","totalFeedback","useState","good","setGood","neutral","setNeutral","bad","setBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","ceil","prev","percentageOfGoodFeedb","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAoBeA,EAjBS,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,gBAAiBC,EAAwC,EAAxCA,mBAAoBC,EAAoB,EAApBA,eAC3D,OACQ,sBAAKC,UAAU,eAAf,UACQ,wBAAQC,KAAK,SAASC,QAASL,EAAiBG,UAAU,UAA1D,mBACJ,wBAAQC,KAAK,SAASC,QAASJ,EAAoBE,UAAU,UAA7D,sBACA,wBAAQC,KAAK,SAASC,QAASH,EAAgBC,UAAU,UAAzD,uBCoBDG,EAzBI,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC5C,OACI,qCACJ,qBAAIR,UAAU,YAAd,UACI,wCAAWI,EAAX,OACA,4CAAeC,EAAf,OACQ,uCAAUC,EAAV,UAEI,IAAVC,EACF,qCACI,4BAAG,kDAAqBA,OAChB,qDAAuB,8BAAIC,IAAJ,UACvB,mEACN,wBCbRC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OAChB,gCACKD,GAAS,6BAAKA,IACdC,MAILF,EAAQG,aAAe,CACnBF,MAAO,IAQID,QChBTI,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,qBAAKd,UAAU,eAAf,SACI,6BAAKc,OAMjBD,EAAaD,aAAe,CACxBE,QAAS,aAOED,QCVTE,G,MAAM,SAACC,GACX,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAEMC,EAAqB,WAEzB,OADsBN,EAAOE,EAAUE,GAInCG,EAAkC,WAItC,OAH8BC,KAAKC,KAChCT,GAAQA,EAAOE,EAAUE,GAAQ,MAEJ,GAoBlC,OACE,sBAAKtB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,yDAGF,cAAC,EAAD,CAASU,MAAM,GAAf,SACE,cAAC,EAAD,CACEb,gBAzBc,WACpBsB,GAAQ,SAACS,GAAD,OAAUA,EAAO,KACzBJ,IACAC,KAuBM3B,mBApBiB,WACvBuB,GAAW,SAACO,GAAD,OAAUA,EAAO,KAC5BJ,KAmBMzB,eAhBa,WACnBwB,GAAO,SAACK,GAAD,OAAUA,EAAO,KACxBJ,SAiBqB,IAAlBR,EACC,cAAC,EAAD,CAASN,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMc,EACNb,QAASe,EACTd,IAAKgB,EACLf,MAAOiB,IACPhB,SAAUiB,MAId,cAAC,EAAD,CAAcX,QAAQ,yBAM9BC,EAAIH,aAAe,CACjBI,cAAe,EACfa,sBAAuB,GAOVd,QCvEAe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5a065ef9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({onHandleGoodBtn, onHandleNeutralBtn, onHandleBadBtn}) => {\r\n    return (\r\n            <div className=\"BtnContainer\">\r\n                    <button type=\"button\" onClick={onHandleGoodBtn} className=\"statBtn\"> Good</button>\r\n                <button type=\"button\" onClick={onHandleNeutralBtn} className=\"statBtn\"> Neutral</button>\r\n                <button type=\"button\" onClick={onHandleBadBtn} className=\"statBtn\"> Bad </button>\r\n            </div>\r\n    )\r\n};\r\n\r\n\r\nFeedbackOptions.propTypes = {\r\n    onHandleGoodBtn: PropTypes.func.isRequired,\r\n    onHandleNeutralBtn: PropTypes.func.isRequired,\r\n    onHandleBadBtn: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({Good, Neutral, Bad, Total, Positive})=>{\r\n    return(\r\n        <>\r\n    <ul className=\"statistic\">\r\n        <li>Good: {Good} </li>\r\n        <li> Neutral: {Neutral} </li>\r\n                <li>Bad: {Bad} </li>\r\n            </ul>\r\n        {(Total !== 0) ? \r\n        <>\r\n            <p><b>Total feedbacks: {Total}</b></p>\r\n                    <p>Positive feedbacks: <b>{Positive()}%</b></p>\r\n                    <h3>Thank you for yours feedback! </h3>\r\n        </> : \"No feedback given\"}\r\n    </>\r\n)};\r\n\r\nStatistics.propTypes = {\r\n    Good: PropTypes.number.isRequired,\r\n    Neutral:PropTypes.number.isRequired,\r\n    Bad:PropTypes.number.isRequired,\r\n    Total:PropTypes.number.isRequired,\r\n    Positive: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children}) => (\r\n<div>\r\n    {title && <h2>{title}</h2>}\r\n    {children}\r\n</div>\r\n);\r\n\r\nSection.defaultProps = {\r\n    title: ''\r\n}\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({message}) => {\r\n    return (\r\n        <div className=\"Notification\">\r\n            <h2>{message}</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nNotification.defaultProps = {\r\n    message: \"Ooops....\"\r\n}\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string,\r\n}\r\n\r\nexport default Notification;","import React from \"react\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\nimport \"./App.css\";\n\nconst App = (totalFeedback) => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n    const totalFeedback = good + neutral + bad;\n    return totalFeedback;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const percentageOfGoodFeedb = Math.ceil(\n      (good / (good + neutral + bad)) * 100\n    );\n    return percentageOfGoodFeedb || 0;\n  };\n\n  const handleGoodBtn = () => {\n    setGood((prev) => prev + 1);\n    countTotalFeedback();\n    countPositiveFeedbackPercentage();\n  };\n\n  const handleNeutralBtn = () => {\n    setNeutral((prev) => prev + 1);\n    countTotalFeedback();\n  };\n\n  const handleBadBtn = () => {\n    setBad((prev) => prev + 1);\n    countTotalFeedback();\n  };\n\n  // render (totalFeedback) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Please leave feedback</h1>\n      </header>\n\n      <Section title=\"\">\n        <FeedbackOptions\n          onHandleGoodBtn={handleGoodBtn}\n          onHandleNeutralBtn={handleNeutralBtn}\n          onHandleBadBtn={handleBadBtn}\n        />\n      </Section>\n      {totalFeedback !== 0 ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            Good={good}\n            Neutral={neutral}\n            Bad={bad}\n            Total={countTotalFeedback()}\n            Positive={countPositiveFeedbackPercentage}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback yet\" />\n      )}\n    </div>\n  );\n};\n\nApp.defaultProps = {\n  totalFeedback: 0,\n  percentageOfGoodFeedb: 0,\n};\nApp.propTypes = {\n  totalFeedback: PropTypes.number,\n  percentageOfGoodFeedb: PropTypes.number,\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}